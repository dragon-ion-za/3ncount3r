name: Build Step

on:
  workflow_call:
    inputs:
      sourcePath:
        required: true
        type: string
      tagName:
        required: true
        type: string
      artifactName:
        required: true
        type: string
    outputs:
      lastTag: 
        value: ${{ jobs.build.outputs.outTag }}
      versionName: 
        value: ${{ jobs.build.outputs.outVersionName }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      outTag: ${{ steps.getTag.outputs.tag }}
      outVersionName: ${{ steps.getVersion.outputs.verName }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Get current version name
      id: getVersion
      shell: pwsh
      run: | 
        $vName = (Get-Content ${{ inputs.sourcePath }}/package.json) -join "`n" | ConvertFrom-Json | Select -ExpandProperty "version"
        echo "verName=$vName" >> $env:GITHUB_OUTPUT

    - name: Get last tag
      id: getTag
      shell: pwsh
      run: | 
        $verList = git tag -l ${{ inputs.tagName }}-${{ steps.getVersion.outputs.verName }}* --sort=-v:refname

        if ($verList -ne $null)
        {
          if ($verList.Contains([Environment]::NewLine))
          {
            echo "tag=$verList.Split([Environment]::NewLine) | Select -First 1" >> $env:GITHUB_OUTPUT
          }
          else
          {
            echo "tag=$verList" >> $env:GITHUB_OUTPUT
          }
        }
        else
        {
          echo "tag=''" >> $env:GITHUB_OUTPUT
        }

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: Build
      run: |
        cd ${{ inputs.sourcePath }}
        npm install
        npm run build

    - name: Display Version Detail
      shell: pwsh
      run: | 
        Write-Host ${{ steps.getTag.outputs.tag }}
        Write-Host ${{ steps.getVersion.outputs.verName }}
    
    - name: Publish Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.artifactName }}
        path: |
          ${{ inputs.sourcePath }}/dist
          ${{ inputs.sourcePath }}/dockerfile
